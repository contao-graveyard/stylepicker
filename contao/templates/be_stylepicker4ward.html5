<div class="tl_formbody_edit" id="styleItems" style="padding:10px">
  <?php if (count($this->items)): ?>
    <?php foreach ($this->items as $item): ?>
      <div class="item hover-div hover-row">
        <div<?php if ($item['image'] !== null): ?> class="image"<?php endif; ?>>
          <input type="checkbox" value="<?= $item['cssclass']; ?> "/>
          <div>
            <h2><?= $item['title']; ?> <span>(<?= $item['cssclass']; ?>)</span></h2>
            <?php if ($item['image'] !== null): ?>
              <?= $this->figure($item['image'], [80, 80, 'proportional']) ?>
            <?php endif; ?>
            <?php if (strlen($item['description'])): ?><p
              class="description"><?= $item['description'] ?? ''; ?></p><?php endif; ?>
          </div>
        </div>
        <hr/>
      </div>
    <?php endforeach; ?>
  <?php else: ?>
    <p class="error"><?= $this->trans('MSC.stylepicker4ward_noItems', [], 'contao_default') ?></p>
  <?php endif; ?>
</div>
<script>
  class StylePicker {
    constructor(cont, parentFieldId) {
      this.cont = cont;
      this.checkboxes = Array.from(cont.querySelectorAll('input'));

      // find parent class-field
      let parentField = parent.document.getElementById(parentFieldId);
      if (!parentField) {
        alert('Parent-Field not found! [E11]');
        return;
      }

      if (parentField.tagName.toLowerCase() !== 'input') {
        const inputs = parentField.querySelectorAll('input');
        if (!inputs || inputs.length < 1) {
          alert('Parent-Field not found! [E12]');
          return;
        }
        this.parentField = inputs[inputs.length - 1];
      } else {
        this.parentField = parentField;
      }

      cont.querySelectorAll('.item').forEach(el => {
        el.addEventListener('click', e => this.clickItem(e, el));
      });

      const classes = this.parentField.value.trim().split(/\s+/);
      classes.forEach(cls => {
        this.checkboxes.forEach(cb => {
          if (cls === cb.value.trim()) {
            cb.checked = true;
          }
        });
      });
    }

    clickItem(e, el) {
      const target = e.target;

      if (target.tagName.toLowerCase() === 'img' && target.getAttribute('rel')) {
        this.showImage(e, target);
        return;
      }

      const input = el.querySelector('input');
      if (!input) return;

      if (!e || target.tagName.toLowerCase() !== 'input') {
        input.checked ^= 1;
      }

      const classname = input.value.trim();
      let classes = this.parentField.value.trim().split(/\s+/).filter(Boolean);

      if (input.checked) {
        if (!classes.includes(classname)) {
          classes.push(classname);
        }
      } else {
        classes = classes.filter(c => c !== classname);
      }

      this.parentField.value = classes.join(' ');
    }

    showImage(ev, el) {
      const src = el.getAttribute('rel');
      const img = new Image();
      img.src = src;

      img.onload = () => {
        const size = { x: img.naturalWidth, y: img.naturalHeight };

        Object.assign(img.style, {
          height: '0px',
          width: '0px',
          position: 'absolute',
          left: el.getBoundingClientRect().x + window.scrollX + 'px',
          top: el.getBoundingClientRect().y + window.scrollY + 'px',
          transition: 'all 0.4s cubic-bezier(0.86, 0, 0.07, 1)'
        });

        img.addEventListener('click', () => {
          img.style.height = '0px';
          img.style.width = '0px';
          img.addEventListener('transitionend', () => img.remove(), { once: true });
        });

        document.body.appendChild(img);

        requestAnimationFrame(() => {
          img.style.height = size.y + 'px';
          img.style.width = size.x + 'px';
        });
      };
    }
  }

  window.onload = () => {
    new StylePicker(document.querySelector('#styleItems'), '<?= $this->field; ?>');
  }
</script>
